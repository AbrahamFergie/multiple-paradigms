#!/usr/bin/env node
const fs = require('fs')
const functional = require('../lib-functional/index')
const parseArgs = require('minimist')
const args = parseArgs(process.argv.slice(2))

const fileName = args._[0]

if (!fileName) {
  throw new Error("Missing fileName argument.")
}

switch (args.paradigm) {
  case 'oo':
    // load and use object-oriented parser
    break
  case 'functional':
    console.log(
      functional.removeItalicsMD(
        functional.addItalicsHTML(
          functional.removeBoldMD(
            functional.addBoldHTML(
              functional.removeListItemsMD(
                functional.addListItems(
                  functional.addUnorderedList(
                    functional.addOrderedList(
                      functional.removeHorizontalMD(
                        functional.addHorizontalRule(
                          functional.removeHeadersMD(
                            functional.addH1(
                              functional.addH2(
                                functional.addH3(
                                  functional.addH4(
                                    functional.addH5(
                                      functional.addH6(
                                        functional.removeBlockQuotesMD(
                                          functional.addBlockQuotes(
                                            fs.readFileSync(fileName, 'utf8')
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
    break
  case 'imperative':
    // load and use imperative parser
    break
  default:
    console.error("Missing --paradigm flag.")
}
